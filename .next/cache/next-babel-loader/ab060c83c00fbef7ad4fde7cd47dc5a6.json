{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyle.nelson\\\\Projects\\\\React\\\\design-shop\\\\src\\\\pages\\\\_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Page from '../component/page';\nimport '../../public/index.css';\nimport { useRouter } from 'next/router';\nimport nProgress from 'nprogress';\nimport '../../public/nprogress.css';\n;\ntoast.configure({\n  draggable: false,\n  autoClose: 5000\n});\n\nfunction MyApp({\n  Component,\n  apollo,\n  pageProps\n}) {\n  const router = useRouter();\n  React.useEffect(() => {\n    const handleRouteChangeStart = url => {\n      nProgress.start();\n    };\n\n    const handleRouteChangeDone = url => {\n      nProgress.done();\n    };\n\n    router.events.on('routeChangeStart', handleRouteChangeStart);\n    router.events.on('routeChangeEnd', handleRouteChangeDone); // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChangeStart);\n    };\n  }, []);\n  console.log('***************   App Component Render  ****************');\n  console.log('Hello Component --------------->', Component);\n  console.log('Hello Page props --------------------->', pageProps);\n  console.log('Hello Apollo --------------------->', apollo);\n  console.log('**************************************************');\n  return __jsx(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  })));\n}\n\n;\n\nMyApp.getInitialProps = async function ({\n  Component,\n  ctx\n}) {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  } // this exposes the url params to the page component so we can use things like item ID in our queries\n\n\n  pageProps = ctx.query;\n  return {\n    pageProps\n  };\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/kyle.nelson/Projects/React/design-shop/src/pages/_app.tsx"],"names":["React","toast","Page","useRouter","nProgress","configure","draggable","autoClose","MyApp","Component","apollo","pageProps","router","useEffect","handleRouteChangeStart","url","start","handleRouteChangeDone","done","events","on","off","console","log","getInitialProps","ctx","query"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAO,wBAAP;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,4BAAP;AAOC;AAEDH,KAAK,CAACI,SAAN,CAAgB;AACdC,EAAAA,SAAS,EAAE,KADG;AAEdC,EAAAA,SAAS,EAAE;AAFG,CAAhB;;AAKA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,CAAf,EAAuD;AACrD,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AAEAH,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,UAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtCX,MAAAA,SAAS,CAACY,KAAV;AACD,KAFD;;AAIA,UAAMC,qBAAqB,GAAIF,GAAD,IAAS;AACrCX,MAAAA,SAAS,CAACc,IAAV;AACD,KAFD;;AAIAN,IAAAA,MAAM,CAACO,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCN,sBAArC;AACAF,IAAAA,MAAM,CAACO,MAAP,CAAcC,EAAd,CAAiB,gBAAjB,EAAmCH,qBAAnC,EAVoB,CAYpB;AACA;;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACO,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCP,sBAAtC;AACD,KAFD;AAGD,GAjBD,EAiBG,EAjBH;AAmBAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDd,SAAhD;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDZ,SAAvD;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDb,MAAnD;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeZ,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;AAAA;;AAEDH,KAAK,CAACgB,eAAN,GAAwB,gBAAe;AAAEf,EAAAA,SAAF;AAAagB,EAAAA;AAAb,CAAf,EAA0C;AAEhE,MAAId,SAAS,GAAG,EAAhB;;AACA,MAAIF,SAAS,CAACe,eAAd,EAA+B;AAC7Bb,IAAAA,SAAS,GAAG,MAAMF,SAAS,CAACe,eAAV,CAA0BC,GAA1B,CAAlB;AACD,GAL+D,CAMhE;;;AACAd,EAAAA,SAAS,GAAGc,GAAG,CAACC,KAAhB;AACA,SAAO;AAAEf,IAAAA;AAAF,GAAP;AACD,CATD;;AAWA,eAAeH,KAAf","sourcesContent":["import * as React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Page from '../component/page';\r\nimport '../../public/index.css';\r\nimport { useRouter } from 'next/router';\r\nimport nProgress from 'nprogress';\r\nimport '../../public/nprogress.css';\r\n\r\ninterface Props {\r\n  Component: any;\r\n  ctx: any;\r\n  apollo: any;\r\n  pageProps: any;\r\n};\r\n\r\ntoast.configure({\r\n  draggable: false,\r\n  autoClose: 5000\r\n});\r\n\r\nfunction MyApp({ Component, apollo, pageProps }:Props) {\r\n  const router = useRouter();\r\n\r\n  React.useEffect(() => {\r\n    const handleRouteChangeStart = (url) => {\r\n      nProgress.start();\r\n    };\r\n\r\n    const handleRouteChangeDone = (url) => {\r\n      nProgress.done();\r\n    };\r\n\r\n    router.events.on('routeChangeStart', handleRouteChangeStart);\r\n    router.events.on('routeChangeEnd', handleRouteChangeDone);\r\n\r\n    // If the component is unmounted, unsubscribe\r\n    // from the event with the `off` method:\r\n    return () => {\r\n      router.events.off('routeChangeStart', handleRouteChangeStart);\r\n    }\r\n  }, []);\r\n\r\n  console.log('***************   App Component Render  ****************');\r\n  console.log('Hello Component --------------->', Component);\r\n  console.log('Hello Page props --------------------->', pageProps);\r\n  console.log('Hello Apollo --------------------->', apollo);\r\n  console.log('**************************************************');\r\n  return (\r\n    <Page>\r\n      <Component {...pageProps} />\r\n    </Page>\r\n  );\r\n};\r\n\r\nMyApp.getInitialProps = async function({ Component, ctx }: Props) {\r\n\r\n  let pageProps = {};\r\n  if (Component.getInitialProps) {\r\n    pageProps = await Component.getInitialProps(ctx);\r\n  }\r\n  // this exposes the url params to the page component so we can use things like item ID in our queries\r\n  pageProps = ctx.query;\r\n  return { pageProps };\r\n};\r\n\r\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}